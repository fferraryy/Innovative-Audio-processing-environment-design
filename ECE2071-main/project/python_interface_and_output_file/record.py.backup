# The file record is to record data from STM32

import serial
import sys
from serial_disk import getvalidPorts
import matplotlib.pyplot as plt
import time
import subprocess
import os

CHUNK_SIZE = 6250
SIZE_OF_SAMPLE = 2
CHUNK_ARRAY_LENGTH = 9375
FILE_NAME = "output.temp"

# Function recordFromSTM is to record data from STM32
def recordFromSTM(port, baud=115200, duration=300):
	s = serial.Serial(port, baudrate=baud) # connect serial
	
	data = []
	for _ in range(duration):
		while True:
			while s.read(1) != b'\xff': # Wait for start of data packet
				pass
			temp = s.read(7)
			print(temp)
			if temp == b'\xee\xdd\xcc\xbb\xaa\x00\xff':
				break
		print("sunced")
		try:
			buff = s.read(CHUNK_ARRAY_LENGTH + 4)
			data = buff
		except KeyboardInterrupt:
			break
	
	print("writing to file")
	print(data)
	with open(FILE_NAME, "wb") as f:
		for chunk in data:
			f.write(chunk)
	#os.system("bash decode.sh")
	
	s.close()
	
if __name__ == "__main__":
	# Process command line arguments
	port = None
	baud = 115200
	duration = 0
	if len(sys.argv) == 2:
		if sys.argv[1].startswith("baud="): # if the argument starts with baud=
			baud = int(sys.argv[1][5:]) # assign baud to be the integer extracts the substring from the 6th character to the end
		elif sys.argv[1].startswith("port="):
			port = sys.argv[1][5:]
		elif sys.argv[1].startswith("duration="):
			duration = int(sys.argv[1][9:])
		else:
			print(f"Invalid argument {sys.argv[1]}.")
			quit()
	if len(sys.argv) == 3:
		if sys.argv[2].startswith("baud="):
			baud = int(sys.argv[2][5:])
		elif sys.argv[2].startswith("port="):
			port = sys.argv[2][5:]
		elif sys.argv[2].startswith("duration="):
			duration = int(sys.argv[2][9:])
		else:
			print(f"Invalid argument {sys.argv[2]}.")
			quit()
	if len(sys.argv) == 4:
		if sys.argv[3].startswith("baud="):
			baud = int(sys.argv[3][5:])
		elif sys.argv[3].startswith("port="):
			port = sys.argv[3][5:]
		elif sys.argv[3].startswith("duration="):
			duration = int(sys.argv[3][9:])
		else:
			print(f"Invalid argument {sys.argv[2]}.")
			quit()

	if port == None:
		ports = getvalidPorts()
		if len(ports) == 0:
			print("There are no available ports")
			quit()
		print("The available ports are:")
		for i,p in enumerate(ports):
			print(f"{i}. {p}")
		while True:
			portNum = input("please enter the number of the port you want to use: ")
			if portNum == "":
				portNum = 0
			try:
				portNum = int(portNum)
				break
			except:
				print(f"invalid choice {portNum}. Please try again\n")
		port = ports[portNum]
	
	recordFromSTM(port, baud, duration)
